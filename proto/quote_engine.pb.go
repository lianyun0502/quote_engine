// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/quote_engine.proto

package quote_proto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SubscribeResponse struct {
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeResponse) Reset()         { *m = SubscribeResponse{} }
func (m *SubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*SubscribeResponse) ProtoMessage()    {}
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b76c75eef5fc675, []int{0}
}

func (m *SubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeResponse.Unmarshal(m, b)
}
func (m *SubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeResponse.Marshal(b, m, deterministic)
}
func (m *SubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeResponse.Merge(m, src)
}
func (m *SubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_SubscribeResponse.Size(m)
}
func (m *SubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeResponse proto.InternalMessageInfo

func (m *SubscribeResponse) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type UnsubscribeResponse struct {
	Result               int64    `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UnsubscribeResponse) Reset()         { *m = UnsubscribeResponse{} }
func (m *UnsubscribeResponse) String() string { return proto.CompactTextString(m) }
func (*UnsubscribeResponse) ProtoMessage()    {}
func (*UnsubscribeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b76c75eef5fc675, []int{1}
}

func (m *UnsubscribeResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UnsubscribeResponse.Unmarshal(m, b)
}
func (m *UnsubscribeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UnsubscribeResponse.Marshal(b, m, deterministic)
}
func (m *UnsubscribeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UnsubscribeResponse.Merge(m, src)
}
func (m *UnsubscribeResponse) XXX_Size() int {
	return xxx_messageInfo_UnsubscribeResponse.Size(m)
}
func (m *UnsubscribeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UnsubscribeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UnsubscribeResponse proto.InternalMessageInfo

func (m *UnsubscribeResponse) GetResult() int64 {
	if m != nil {
		return m.Result
	}
	return 0
}

type Subscribe struct {
	Symbol               string   `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Subscribe) Reset()         { *m = Subscribe{} }
func (m *Subscribe) String() string { return proto.CompactTextString(m) }
func (*Subscribe) ProtoMessage()    {}
func (*Subscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b76c75eef5fc675, []int{2}
}

func (m *Subscribe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Subscribe.Unmarshal(m, b)
}
func (m *Subscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Subscribe.Marshal(b, m, deterministic)
}
func (m *Subscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Subscribe.Merge(m, src)
}
func (m *Subscribe) XXX_Size() int {
	return xxx_messageInfo_Subscribe.Size(m)
}
func (m *Subscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_Subscribe.DiscardUnknown(m)
}

var xxx_messageInfo_Subscribe proto.InternalMessageInfo

func (m *Subscribe) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

type Unsubscribe struct {
	Symbol               string   `protobuf:"bytes,1,opt,name=symbol,proto3" json:"symbol,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Unsubscribe) Reset()         { *m = Unsubscribe{} }
func (m *Unsubscribe) String() string { return proto.CompactTextString(m) }
func (*Unsubscribe) ProtoMessage()    {}
func (*Unsubscribe) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b76c75eef5fc675, []int{3}
}

func (m *Unsubscribe) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Unsubscribe.Unmarshal(m, b)
}
func (m *Unsubscribe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Unsubscribe.Marshal(b, m, deterministic)
}
func (m *Unsubscribe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Unsubscribe.Merge(m, src)
}
func (m *Unsubscribe) XXX_Size() int {
	return xxx_messageInfo_Unsubscribe.Size(m)
}
func (m *Unsubscribe) XXX_DiscardUnknown() {
	xxx_messageInfo_Unsubscribe.DiscardUnknown(m)
}

var xxx_messageInfo_Unsubscribe proto.InternalMessageInfo

func (m *Unsubscribe) GetSymbol() string {
	if m != nil {
		return m.Symbol
	}
	return ""
}

type ListQuotesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ListQuotesRequest) Reset()         { *m = ListQuotesRequest{} }
func (m *ListQuotesRequest) String() string { return proto.CompactTextString(m) }
func (*ListQuotesRequest) ProtoMessage()    {}
func (*ListQuotesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b76c75eef5fc675, []int{4}
}

func (m *ListQuotesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ListQuotesRequest.Unmarshal(m, b)
}
func (m *ListQuotesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ListQuotesRequest.Marshal(b, m, deterministic)
}
func (m *ListQuotesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListQuotesRequest.Merge(m, src)
}
func (m *ListQuotesRequest) XXX_Size() int {
	return xxx_messageInfo_ListQuotesRequest.Size(m)
}
func (m *ListQuotesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListQuotesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListQuotesRequest proto.InternalMessageInfo

func init() {
	proto.RegisterType((*SubscribeResponse)(nil), "quote_proto.SubscribeResponse")
	proto.RegisterType((*UnsubscribeResponse)(nil), "quote_proto.UnsubscribeResponse")
	proto.RegisterType((*Subscribe)(nil), "quote_proto.Subscribe")
	proto.RegisterType((*Unsubscribe)(nil), "quote_proto.Unsubscribe")
	proto.RegisterType((*ListQuotesRequest)(nil), "quote_proto.ListQuotesRequest")
}

func init() {
	proto.RegisterFile("proto/quote_engine.proto", fileDescriptor_4b76c75eef5fc675)
}

var fileDescriptor_4b76c75eef5fc675 = []byte{
	// 243 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0x28, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x2c, 0xcd, 0x2f, 0x49, 0x8d, 0x4f, 0xcd, 0x4b, 0xcf, 0xcc, 0x4b, 0xd5, 0x03,
	0x0b, 0x09, 0x71, 0x43, 0xc4, 0xc0, 0x1c, 0x25, 0x6d, 0x2e, 0xc1, 0xe0, 0xd2, 0xa4, 0xe2, 0xe4,
	0xa2, 0xcc, 0xa4, 0xd4, 0xa0, 0xd4, 0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0x21, 0x31, 0x2e, 0xb6,
	0xa2, 0xd4, 0xe2, 0xd2, 0x9c, 0x12, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xe6, 0x20, 0x28, 0x4f, 0x49,
	0x97, 0x4b, 0x38, 0x34, 0xaf, 0x98, 0x68, 0xe5, 0xca, 0x5c, 0x9c, 0x70, 0xb3, 0x41, 0x8a, 0x8a,
	0x2b, 0x73, 0x93, 0xf2, 0x73, 0xc0, 0x8a, 0x38, 0x83, 0xa0, 0x3c, 0x25, 0x55, 0x2e, 0x6e, 0x24,
	0x33, 0x71, 0x2a, 0x13, 0xe6, 0x12, 0xf4, 0xc9, 0x2c, 0x2e, 0x09, 0x04, 0x39, 0xbd, 0x38, 0x28,
	0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0xc4, 0xe8, 0x07, 0x23, 0x17, 0x0f, 0x58, 0x24, 0x38, 0xb5, 0xa8,
	0x2c, 0x33, 0x39, 0x55, 0xc8, 0x83, 0x8b, 0x0b, 0xa1, 0x4a, 0x48, 0x4e, 0x0f, 0xc9, 0xa7, 0x7a,
	0x18, 0xda, 0xa5, 0xc4, 0x50, 0xe4, 0xe1, 0x4e, 0x55, 0x62, 0x30, 0x60, 0x14, 0xf2, 0xe6, 0xe2,
	0x85, 0x0b, 0x38, 0xe7, 0x67, 0xe6, 0x09, 0xe1, 0x50, 0x2c, 0x25, 0x87, 0x5d, 0x1c, 0x16, 0x38,
	0x4a, 0x0c, 0x1a, 0x8c, 0x42, 0x81, 0x5c, 0xfc, 0x48, 0x7e, 0x04, 0x1b, 0x27, 0x81, 0xa2, 0x0d,
	0x49, 0x56, 0x4a, 0x01, 0x97, 0x0c, 0xb2, 0x91, 0x4e, 0xc2, 0x51, 0x82, 0xc8, 0x11, 0x0c, 0x66,
	0x27, 0xb1, 0x81, 0x29, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0xbe, 0xf2, 0x5b, 0x49, 0xfc,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// QuoteServiceClient is the client API for QuoteService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QuoteServiceClient interface {
	ListQuotes(ctx context.Context, in *ListQuotesRequest, opts ...grpc.CallOption) (QuoteService_ListQuotesClient, error)
	SubscribeCoin(ctx context.Context, opts ...grpc.CallOption) (QuoteService_SubscribeCoinClient, error)
	UnsubscribeCoin(ctx context.Context, opts ...grpc.CallOption) (QuoteService_UnsubscribeCoinClient, error)
}

type quoteServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQuoteServiceClient(cc grpc.ClientConnInterface) QuoteServiceClient {
	return &quoteServiceClient{cc}
}

func (c *quoteServiceClient) ListQuotes(ctx context.Context, in *ListQuotesRequest, opts ...grpc.CallOption) (QuoteService_ListQuotesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QuoteService_serviceDesc.Streams[0], "/quote_proto.QuoteService/ListQuotes", opts...)
	if err != nil {
		return nil, err
	}
	x := &quoteServiceListQuotesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type QuoteService_ListQuotesClient interface {
	Recv() (*Subscribe, error)
	grpc.ClientStream
}

type quoteServiceListQuotesClient struct {
	grpc.ClientStream
}

func (x *quoteServiceListQuotesClient) Recv() (*Subscribe, error) {
	m := new(Subscribe)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *quoteServiceClient) SubscribeCoin(ctx context.Context, opts ...grpc.CallOption) (QuoteService_SubscribeCoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QuoteService_serviceDesc.Streams[1], "/quote_proto.QuoteService/SubscribeCoin", opts...)
	if err != nil {
		return nil, err
	}
	x := &quoteServiceSubscribeCoinClient{stream}
	return x, nil
}

type QuoteService_SubscribeCoinClient interface {
	Send(*Subscribe) error
	CloseAndRecv() (*SubscribeResponse, error)
	grpc.ClientStream
}

type quoteServiceSubscribeCoinClient struct {
	grpc.ClientStream
}

func (x *quoteServiceSubscribeCoinClient) Send(m *Subscribe) error {
	return x.ClientStream.SendMsg(m)
}

func (x *quoteServiceSubscribeCoinClient) CloseAndRecv() (*SubscribeResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(SubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *quoteServiceClient) UnsubscribeCoin(ctx context.Context, opts ...grpc.CallOption) (QuoteService_UnsubscribeCoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &_QuoteService_serviceDesc.Streams[2], "/quote_proto.QuoteService/UnsubscribeCoin", opts...)
	if err != nil {
		return nil, err
	}
	x := &quoteServiceUnsubscribeCoinClient{stream}
	return x, nil
}

type QuoteService_UnsubscribeCoinClient interface {
	Send(*Unsubscribe) error
	CloseAndRecv() (*UnsubscribeResponse, error)
	grpc.ClientStream
}

type quoteServiceUnsubscribeCoinClient struct {
	grpc.ClientStream
}

func (x *quoteServiceUnsubscribeCoinClient) Send(m *Unsubscribe) error {
	return x.ClientStream.SendMsg(m)
}

func (x *quoteServiceUnsubscribeCoinClient) CloseAndRecv() (*UnsubscribeResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UnsubscribeResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// QuoteServiceServer is the server API for QuoteService service.
type QuoteServiceServer interface {
	ListQuotes(*ListQuotesRequest, QuoteService_ListQuotesServer) error
	SubscribeCoin(QuoteService_SubscribeCoinServer) error
	UnsubscribeCoin(QuoteService_UnsubscribeCoinServer) error
}

// UnimplementedQuoteServiceServer can be embedded to have forward compatible implementations.
type UnimplementedQuoteServiceServer struct {
}

func (*UnimplementedQuoteServiceServer) ListQuotes(req *ListQuotesRequest, srv QuoteService_ListQuotesServer) error {
	return status.Errorf(codes.Unimplemented, "method ListQuotes not implemented")
}
func (*UnimplementedQuoteServiceServer) SubscribeCoin(srv QuoteService_SubscribeCoinServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeCoin not implemented")
}
func (*UnimplementedQuoteServiceServer) UnsubscribeCoin(srv QuoteService_UnsubscribeCoinServer) error {
	return status.Errorf(codes.Unimplemented, "method UnsubscribeCoin not implemented")
}

func RegisterQuoteServiceServer(s *grpc.Server, srv QuoteServiceServer) {
	s.RegisterService(&_QuoteService_serviceDesc, srv)
}

func _QuoteService_ListQuotes_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListQuotesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(QuoteServiceServer).ListQuotes(m, &quoteServiceListQuotesServer{stream})
}

type QuoteService_ListQuotesServer interface {
	Send(*Subscribe) error
	grpc.ServerStream
}

type quoteServiceListQuotesServer struct {
	grpc.ServerStream
}

func (x *quoteServiceListQuotesServer) Send(m *Subscribe) error {
	return x.ServerStream.SendMsg(m)
}

func _QuoteService_SubscribeCoin_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QuoteServiceServer).SubscribeCoin(&quoteServiceSubscribeCoinServer{stream})
}

type QuoteService_SubscribeCoinServer interface {
	SendAndClose(*SubscribeResponse) error
	Recv() (*Subscribe, error)
	grpc.ServerStream
}

type quoteServiceSubscribeCoinServer struct {
	grpc.ServerStream
}

func (x *quoteServiceSubscribeCoinServer) SendAndClose(m *SubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *quoteServiceSubscribeCoinServer) Recv() (*Subscribe, error) {
	m := new(Subscribe)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _QuoteService_UnsubscribeCoin_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(QuoteServiceServer).UnsubscribeCoin(&quoteServiceUnsubscribeCoinServer{stream})
}

type QuoteService_UnsubscribeCoinServer interface {
	SendAndClose(*UnsubscribeResponse) error
	Recv() (*Unsubscribe, error)
	grpc.ServerStream
}

type quoteServiceUnsubscribeCoinServer struct {
	grpc.ServerStream
}

func (x *quoteServiceUnsubscribeCoinServer) SendAndClose(m *UnsubscribeResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *quoteServiceUnsubscribeCoinServer) Recv() (*Unsubscribe, error) {
	m := new(Unsubscribe)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _QuoteService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "quote_proto.QuoteService",
	HandlerType: (*QuoteServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListQuotes",
			Handler:       _QuoteService_ListQuotes_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeCoin",
			Handler:       _QuoteService_SubscribeCoin_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "UnsubscribeCoin",
			Handler:       _QuoteService_UnsubscribeCoin_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "proto/quote_engine.proto",
}
